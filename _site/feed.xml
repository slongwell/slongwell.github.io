<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rsfp</title>
    <description>Scott Longwell's webzone</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Oct 2016 19:24:26 -0700</pubDate>
    <lastBuildDate>Thu, 20 Oct 2016 19:24:26 -0700</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Karabiner is Karabroken on macOS Sierra. Here's a Temporary Solution.</title>
        <description>&lt;p&gt;I’ve used &lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner&lt;/a&gt; for Mac to embed my arrow keys in a Diamond-style configuration - in other words, &lt;kbd&gt;j-l-i-k&lt;/kbd&gt; maps to &lt;kbd&gt;left-right-up-down&lt;/kbd&gt;. This configuration is active when the caps lock key is held. (&lt;em&gt;Note&lt;/em&gt;: the &lt;a href=&quot;https://pqrs.org/osx/karabiner/seil.html.en&quot;&gt;Seil&lt;/a&gt; utility is specifically required for remapping &lt;kbd&gt;CAPS&lt;/kbd&gt;. I remapped &lt;kbd&gt;CAPS&lt;/kbd&gt; to &lt;kbd&gt;CTRL_R&lt;/kbd&gt;, which is not present on my MBP. Consequently, &lt;kbd&gt;CTRL_R&lt;/kbd&gt; is technically the modifier key). I’ve similarly embedded &lt;kbd&gt;BKSP&lt;/kbd&gt; and &lt;kbd&gt;DEL&lt;/kbd&gt; as the &lt;kbd&gt;o&lt;/kbd&gt; and &lt;kbd&gt;p&lt;/kbd&gt; keys and added additional ‘super-modifier’ keys: &lt;kbd&gt;f&lt;/kbd&gt; to signify ‘word at a time’ (e.g. &lt;kbd&gt;CAPS-f-j&lt;/kbd&gt; jumps back a word), &lt;kbd&gt;d&lt;/kbd&gt; to go to beginning/end of line, and &lt;kbd&gt;s&lt;/kbd&gt; to highlight a selection. Karabiner can also detect the vendor ID associated with a connected keyboard, so it can apply specific remappings to specific keyboards (e.g. the command and option keys can be switched for a PC keyboard while leaving the bindings for the built-in MBP keyboard unaltered). Finally, I’ve been experimenting with using &lt;kbd&gt;CMD_R&lt;/kbd&gt; as a key for exposing all windows and as a toggle key for switching between spaces using &lt;kbd&gt;j&lt;/kbd&gt; and &lt;kbd&gt;l&lt;/kbd&gt;. If you’re curious about implementing any of these features, see my &lt;code class=&quot;highlighter-rouge&quot;&gt;private.xml&lt;/code&gt; file &lt;a href=&quot;/files/private.xml&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I recently updated to macOS Sierra from El Cap, which to my dismay caused Karbiner and Seil to stop working. &lt;a href=&quot;https://pqrs.org/profile.html.en&quot;&gt;The author&lt;/a&gt; (bless him) is hard at work on a new version called &lt;a href=&quot;https://github.com/tekezo/Karabiner-Elements&quot;&gt;Karabiner-Elements&lt;/a&gt;. However, the early release (v0.90.40) does not have a usable GUI interface and only supports basic behavior like switching keys.&lt;/p&gt;

&lt;p&gt;Fortunately, macOS features &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/EventOverview/TextDefaultsBindings/TextDefaultsBindings.html#//apple_ref/doc/uid/20000468-CJBDEADF&quot;&gt;built-in support&lt;/a&gt; for altering keybindings by creating a &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/PropertyLists/Introduction/Introduction.html&quot;&gt;property list&lt;/a&gt; (.dict file) in the user library directory. This property list can be written in either XML or the ‘old-ASCII/NeXT’ style (the example below uses the old-style). A complete listing of possible actions is available in the &lt;a href=&quot;https://developer.apple.com/reference/appkit/nsresponder&quot;&gt;developer documentation&lt;/a&gt; for the macOS API.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My workaround uses Karabiner-Elements to do the heavy lifting to remap &lt;kbd&gt;CAPS&lt;/kbd&gt; to &lt;kbd&gt;CTRL_R&lt;/kbd&gt;. When either &lt;kbd&gt;CTRL&lt;/kbd&gt; key is held, a property list specifies the arrow keys as &lt;kbd&gt;jlik&lt;/kbd&gt;, &lt;kbd&gt;BKSP&lt;/kbd&gt; as &lt;kbd&gt;o&lt;/kbd&gt;, and &lt;kbd&gt;DEL&lt;/kbd&gt; as &lt;kbd&gt;;&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Disclaimer: &lt;a href=&quot;https://cdn-images-1.medium.com/max/600/1*snTXFElFuQLSFDnvZKJ6IA.png&quot;&gt;I’ve&lt;/a&gt; never taken a class in operating systems.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://github.com/tekezo/Karabiner-Elements/tree/master/usage&quot;&gt;Karabiner-Elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In Karabiner-Elements, remap &lt;kbd&gt;CAPS&lt;/kbd&gt; to &lt;kbd&gt;CTRL_R&lt;/kbd&gt;:&lt;/p&gt;

    &lt;p&gt;Update: The ‘manual’ actions below are no longer necessary, as recent versions of Karabiner-Elements (~v90.48, noted 2016-10-10) now facilitate simple key swaps via the GUI. Note that Karabiner-Elements will automatically create/modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;karabiner.json&lt;/code&gt; config file; since this config file has slight changes in format, it may be in conflict with manually created ones.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;In terminal&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mkdir -p ~/.karabiner.d/configuration/
 cd ~/.karabiner.d/configuration/  
 touch karabiner.json  
 open karabiner.json  
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;em&gt;Into the text editor that opens, paste and save&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;profiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Default profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;selected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;simple_modifications&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;caps_lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;right_control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the user library, create a keybinding property list:&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;In terminal&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mkdir -p ~/Library/KeyBindings
 cd ~/Library/KeyBindings
 touch DefaultKeyBinding.dict
 open -a TextEdit DefaultKeyBinding.dict
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;em&gt;Into the TextEdit window that opens, paste and save&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Diamond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;arrows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;^j&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;moveBackward:&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;^l&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;moveForward:&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;^i&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;moveUp:&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;^k&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;moveDown:&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Backspace;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;^o&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;deleteBackward:&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;^;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;deleteForward:&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
 &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Before these changes take effect in a given application, the application must be restarted. A full computer restart is ideal.&lt;/p&gt;

&lt;p&gt;The resulting mapping is far less powerful - it lacks ‘super-modifier’ keys, keyboard vendor ID detection, and the ability to discern left and right &lt;kbd&gt;CTRL/OPT&lt;/kbd&gt; keys. However, it should be an effective stopgap until Karabiner-Elements reaches maturity. Likewise, I’m only scratching the surface - I’m sure these missing features are possible (and probably easy) to implement, and, without delving into source code, I’d suspect Karabiner itself interacts with macOS in a similar manner, albeit with a C-based API.&lt;/p&gt;

&lt;p&gt;Updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unfortunately, these keybindings do not appear to override application-specific keybindings (e.g. in Terminal, Sublime).&lt;/li&gt;
  &lt;li&gt;A similar &lt;kbd&gt;CAPS&lt;/kbd&gt; to &lt;kbd&gt;CTRL&lt;/kbd&gt; remapping can be performed natively without Karabiner-Elements (i.e. without Steps 1,2 above) by going to &lt;code class=&quot;highlighter-rouge&quot;&gt;System Preferences &amp;gt; Keyboard::Keyboard &amp;gt; Modifier Keys...&lt;/code&gt;. Unlike Karabiner-Elements, this approach cannot distinguish between left and right modifier keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See also: &lt;br /&gt;
&lt;a href=&quot;http://www.hcs.harvard.edu/~jrus/Site/Cocoa%20Text%20System.html&quot;&gt;Customizing the Cocoa Text System&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://xahlee.info/kbd/osx_keybinding.html&quot;&gt;How to Create Keyboard Layout and Keybinding&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;hhttp://www.cocoabits.com/KeyBindingsEditor/&quot;&gt;KeyBindingsEditor&lt;/a&gt;
&lt;a href=&quot;http://sbnes.livejournal.com/3725.html&quot;&gt;Mac OS X Key Bindings&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Sep 2016 15:36:00 -0700</pubDate>
        <link>/articles/2016-09/karabiner-workaround</link>
        <guid isPermaLink="true">/articles/2016-09/karabiner-workaround</guid>
        
        
      </item>
    
      <item>
        <title>Aliases, Symlinks, Hardlinks: Not Aliases</title>
        <description>&lt;p&gt;Symlinks: &lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s source target&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hardlinks: &lt;code class=&quot;highlighter-rouge&quot;&gt;ln source target&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Aliases: &lt;a href=&quot;http://stackoverflow.com/questions/7072208/how-do-i-create-a-macintosh-finder-alias-from-the-command-line&quot;&gt;see here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In general, making a shortcut involves a &lt;em&gt;source&lt;/em&gt; and &lt;em&gt;target&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;source: the existing file/folder&lt;/li&gt;
  &lt;li&gt;target: the ‘link’ that will be created 
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;On Unix, there are two main types of links: &lt;em&gt;symbolic links&lt;/em&gt; and &lt;em&gt;hardlinks&lt;/em&gt;. Mac OS X adds a third to the mix via the Finder: &lt;em&gt;aliases&lt;/em&gt;. While all three can be thought of as ‘shortcuts’, they have distinct behaviors that are important to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Symbolic links (aka symlinks, softlinks) point to a file or folder at a specific path. If the source file is moved, the link will be broken.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hardlinks are to a specific source &lt;a href=&quot;https://en.wikipedia.org/wiki/Inode&quot;&gt;inode&lt;/a&gt;, which uniquely identifies a file. If the source file is moved, the link will persist.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aliases are created by the Finder application. (&lt;em&gt;Note&lt;/em&gt;: they are distinct from bash command aliases.) In a sense, they subsume symlinks and hardlinks. When an alias is clicked, it first behaves like a symlink, checking the source path. If no file is present at the source path, the system will then search for the inode of the original file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 04 Sep 2016 18:06:19 -0700</pubDate>
        <link>/articles/2016-09/aliases</link>
        <guid isPermaLink="true">/articles/2016-09/aliases</guid>
        
        
      </item>
    
  </channel>
</rss>
